name: Block PRs with Unintended Develop Commits

on:
  pull_request:
    branches:
      - w10
      - 'release/ido-**'  # This pattern will match any branch with release/ido- prefix

jobs:
  check-commits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history to analyze commits

      - name: Find Unintended Develop Commits
        run: |
          BASE_BRANCH=$(jq -r ".base.ref" "$GITHUB_EVENT_PATH")  # e.g., w10 or release/ido-2025-13
          PR_BRANCH=$(jq -r ".pull_request.head.ref" "$GITHUB_EVENT_PATH")  # PR branch
          DEVELOP_BRANCH=main  # Assuming main is your develop branch
          
          echo "Checking PR to $BASE_BRANCH from $PR_BRANCH"
          
          # Find the common ancestor (merge base) of develop and target branch
          COMMON_ANCESTOR=$(git merge-base origin/$DEVELOP_BRANCH origin/$BASE_BRANCH)
          
          echo "Common ancestor commit: $COMMON_ANCESTOR"
          
          # Create temporary files to store commit hashes
          DEVELOP_COMMITS_FILE=$(mktemp)
          PR_COMMITS_FILE=$(mktemp)
          
          # Get develop commits since the common ancestor
          git log --format="%H" $COMMON_ANCESTOR..origin/$DEVELOP_BRANCH > $DEVELOP_COMMITS_FILE
          
          # Get PR branch commits since the common ancestor
          git log --format="%H" $COMMON_ANCESTOR..origin/$PR_BRANCH > $PR_COMMITS_FILE
          
          # Find commits that appear in both lists (intersection)
          UNEXPECTED_COMMITS=$(comm -12 <(sort $DEVELOP_COMMITS_FILE) <(sort $PR_COMMITS_FILE))
          
          # Clean up temp files
          rm $DEVELOP_COMMITS_FILE $PR_COMMITS_FILE
          
          if [[ -n "$UNEXPECTED_COMMITS" ]]; then
            echo "❌ The following commits from develop are unintentionally included:"
            for COMMIT in $UNEXPECTED_COMMITS; do
              git show --oneline --no-patch $COMMIT
            done
            echo "These commits should not be included in PRs to release branches."
            exit 1  # Fail the action to block the PR
          else
            echo "✅ No unintended develop commits found."
          fi
