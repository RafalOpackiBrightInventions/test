name: Hotfix Branch Validation

on:
  pull_request:
    types: [opened, synchronize, edited]

jobs:
  validate-hotfix-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for comparison

      - name: Validate Hotfix Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Validate release branch naming
          validate_release_branch_name() {
            local branch_name="$1"
            if [[ ! "$branch_name" =~ ^release/ido-[0-9]{4}-[0-9]{2}$ ]]; then
              echo "::error::Invalid release branch name. Must follow pattern 'release/ido-YYYY-WW'."
              exit 1
            fi
          }

          # Get PR details
          PR_NUMBER="${{ github.event.pull_request.number }}"
          BASE_BRANCH=$(gh pr view "$PR_NUMBER" --json baseRefName -q .baseRefName)
          HEAD_BRANCH=$(gh pr view "$PR_NUMBER" --json headRefName -q .headRefName)

          # Validate release branch name if base is a release branch
          if [[ "$BASE_BRANCH" == release/* ]]; then
            validate_release_branch_name "$BASE_BRANCH"

            # Check for commits from develop in the PR
            # Get commits in the PR
            pr_commits=$(gh pr diff "$PR_NUMBER" --patch | grep -E '^commit ' | awk '{print $2}')

            # Get all commits from develop that are not in the release branch
            develop_unique_commits=$(gh git log develop --not "$BASE_BRANCH" --pretty=format:"%H")

            # Check if any PR commits match develop's unique commits
            for commit in $pr_commits; do
              if echo "$develop_unique_commits" | grep -q "$commit"; then
                echo "::error::Hotfix PR contains commits from develop branch. This is not allowed."
                exit 1
              fi
            done
          fi

          echo "PR validation passed successfully!"
